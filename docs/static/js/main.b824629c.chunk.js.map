{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGift.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","replace","l","toUpperCase","type","className","value","onChange","target","GifGridItem","id","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAmCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAiBtC,OACK,sBAAMC,SAXW,SAACC,GACvBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,EAAWQ,QAAQ,SAAS,SAAAC,GAAC,OAAIA,EAAEC,kBAAxC,mBAA0DH,OAC5EN,EAAc,MAMb,SACC,uBACAU,KAAK,OACLC,UAAU,SACVC,MAAQb,EACRc,SApBoB,SAACX,GACvBF,EAAcE,EAAEY,OAAOF,a,QCSfG,EAZK,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC3B,OAEI,sBAAKP,UAAU,8CAAf,UACI,qBAAKQ,IAAKD,EAAKE,IAAKH,IACpB,4BAAIA,Q,uBCRHI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbL,EADa,0FAC4EM,UAAUF,GADtF,sBAEAG,MAAMP,GAFN,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHf,GAAGe,EAAIf,GACPC,MAAMc,EAAId,MACVC,IAAG,UAACa,EAAIC,cAAL,aAAC,EAAYC,iBAAiBf,QARtB,kBAaZW,GAbY,4CAAH,sDC2BLK,EAvBC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECAJ,SAAEA,GAAe,IAAD,EAEdxB,mBACzB,CACC8B,KAAK,GACLO,SAAS,IAL6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmB5C,OAXKC,qBAAU,WACPjB,EAAQC,GACPiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAKY,EACLL,SAAQ,SAGhB,CAACb,IAGFc,EDjB2BK,CAAcnB,GAAhCU,EAFgB,EAErBJ,KAAYO,EAFS,EAETA,QAGnB,OACI,qCACA,oBAAIxB,UAAU,YAAd,SAA2BW,IAC1Ba,GAAW,wCACZ,qBAAKxB,UAAU,QAAf,SAEIqB,EAAOF,KAAI,SAAAY,GAAK,OAChB,cAAC,EAAD,eAEIA,GADGA,EAAM1B,aEeV2B,EA5BM,WAAO,IAAD,EACa7C,mBAAU,CAAC,WADxB,mBAChB8C,EADgB,KACJ/C,EADI,KAGvB,OACC,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,qBAAKc,UAAU,QAAf,SACA,6BAGMiC,EAAWd,KAAI,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,cCdnBuB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.b824629c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst AddCategory = ({setcategories}) => {\r\n\r\n   const [inputValue, setInputValue] = useState(\"\");\r\n   const handleInputChange = (e) => {\r\n       setInputValue(e.target.value);\r\n   }\r\n\r\n   const hanslesSubmit = (e) => {\r\n   e.preventDefault();\r\n \r\n    if (inputValue.trim().length > 2) {\r\n       setcategories(cats => [inputValue.replace(/\\b\\w/g, l => l.toUpperCase()),...cats]);\r\n       setInputValue(''); \r\n    }\r\n\r\n\r\n   }\r\n   return (\r\n        <form onSubmit={hanslesSubmit}>\r\n         <input\r\n         type=\"text\" \r\n         className=\"buscar\" \r\n         value={ inputValue }\r\n         onChange={ handleInputChange }\r\n         />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        \r\n        <div className=\"card animate__animated animate__fadeInUpBig\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifGridItem\r\n","export const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=ebx9bAYlFHC1AzA2Gg1nxOIXJ3q3lWcw&q=${encodeURI(category)}&limit=20`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n\r\n    return gifs;\r\n \r\n   }  ","\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n     \r\n    const {data:images,loading} = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"categoria\">{category}</h3> \r\n        {loading && <p>Loading</p>}\r\n        <div className=\"lista\"> \r\n            {\r\n            images.map(image => (\r\n            <GifGridItem \r\n            key = {image.id}\r\n            {...image}/>\r\n            ))\r\n            }   \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGift';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState\r\n    ({\r\n      data:[],\r\n      loading: true\r\n    });\r\n    \r\n     useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n        })\r\n     }, [category])\r\n\r\n\r\nreturn state;\r\n}","// rafcp\r\nimport React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n    const [categories, setcategories] = useState( [\"Naruto\"]);\r\n\r\n    return (\r\n     <>\r\n     <h2>GifExpertApp</h2>\r\n     <AddCategory setcategories = {setcategories}/>\r\n     <hr></hr>\r\n     <div className=\"lista\">\r\n     <ol>\r\n         {\r\n        \r\n           categories.map(category => (\r\n              <GifGrid\r\n              key={category}\r\n              category={category}\r\n              />\r\n            ))\r\n\r\n          }\r\n     </ol>\r\n     </div>\r\n     </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifexprtApp from './GifExpertApp';\nReactDOM.render(\n\n    <GifexprtApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}